<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<style>

text {
  font: 10px sans-serif;
}

</style>
<link rel="stylesheet" type="text/css" href="css/main.css" media="screen" />

</head>
<body>

<h1 data-bind="with: current">
  <a data-bind="text: name"></a>
  <span data-bind="css: { hide: url() == null }"> - <a data-bind="attr: { href: url }" target="_blank"><img style="width: 18px" src="img/basic2-284_maximize_window_external_link-128.png"/></a></span>
</h1>

<table>
  <thead>
  </thead>
  <tbody data-bind="foreach: list">
    <tr>
      <td>
        <a href="" data-bind="click: click, text: label"></a>
        <span data-bind="css: { hide: url() == null }"> - <a data-bind="attr: { href: url }" target="_blank"><img style="width: 18px" src="img/basic2-284_maximize_window_external_link-128.png"/></a></span>
      </td>
    </tr>
  </tbody>
  <tfoot>
  </tfoot>
</table>


<script src="bower_components/jquery/dist/jquery.min.js"></script>
<script src="bower_components/knockout/dist/knockout.js"></script>
<script src="underscore.min.js"></script>


<script>

function Result( name, _url ) {
  var self = this;

  this.label = name;
  this.url = _url;
}


function Word(_id) {
  var self = this;

  this.id = _id;
  this.name = ko.observable("");
  this.label = ko.observable("");
  this.url = ko.observable("");

  self.click = function() {
    shvm.run( self.id );
  }
}


function ShowViewModel() {
  var self = this;

  self.list = ko.observableArray();

  self.wordList = [];
  self.wordIdx = {};

  self.getWord = function(id) {
    if ( self.wordIdx[id] != undefined ) {
      return self.wordIdx[id];
    }

    var word = new Word(id);
    self.wordList.push(word);
    self.wordIdx[id] = word;

    $.getJSON( "/word/" + id, function( el ) {
      var word = self.wordIdx[el.id];
      word.name( el.name );
      word.label( el.name );
      word.url( el.url );
    });

    return word;
  }

  self.run = function(id) {
    self.current( self.getWord( id ) );

    $.getJSON( "/link/" + id, function( _l ) {
      self.list.removeAll();
      _.each( _l, function( el ) {
        var w = self.getWord( el.id );
        self.list.push( w );
      });
    });

  }

  self.current = ko.observable();
}


var shvm = new ShowViewModel();
ko.applyBindings( shvm );

shvm.run( 3 );

</script>

</body>
</html>
